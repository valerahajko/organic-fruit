/* взято з https://fonts.google.com/ */

@import url('https://fonts.googleapis.com/css2?family=DM+Sans:opsz,wght@9..40,400;9..40,500;9..40,700&family=Rosario:wght@700&display=swap');
/* font-family: 'DM Sans', sans-serif;
font-family: 'Rosario', sans-serif; */  
 
:root {
    /* ========================== font family ========================== */
    --ff-dnSans: 'DM Sans', sans-serif;
    --ff-Rosario: 'Rosario', sans-serif;

    /* ========================== color ========================== */
    --color-primary: #222222;
    --color-secondary: #555555;
    --color-black: #000000;
    --color-dark: #333333;
    --color-white: #ffffff;
    --color-blue: #2979FF;
    --btn-border: #ccc;

    /* ========================== background ========================== */
    --bg-mint-cream: #F3FBF8;
    --bg-green-lt: #09A66D;
    --bg-white: #ffffff;
    --bg-green-lt-op: #09a66d0d;
    --bg-footer: #FCFEFD;
}

/* ========================== dafault style ========================== */
* {
margin: 0; /* Великим секціям і блокам не задаємо зовнішні відступи */
padding: 0;
box-sizing: border-box; /* правило, яке не буде змінювати розмір батьківського блоку, якщо будуть змінюватись розміри дочірніх елементів */
}

/* скидаємо стилі для a */
a {
    color: inherit; /* буде наслідувати шрифт */
    text-decoration: none; /* забираємо підкреслювання тексту */
}

ul {
    list-style: none;
}

img {
max-width: 100%; /* картинка буде тої ж ширини, що і батьківський елемент і не більше */
display: block;  /* картинка буде тої ж ширини, що і батьківський елемент і не більше */
}

.btn {      /* обнулюємо стилі */
border: none;
outline: none; /* той же бордер, який спрацьовує при кліку */
background: transparent; /* забираємо бекграунд і робимо його прозорим */
cursor: pointer;
}

input {
font-family: inherit;    /* буде наслідувати */
font-size: inherit;    /* буде наслідувати */
border: none;
outline: none; /* той же бордер, який спрацьовує при кліку */
}

.inner-title { /* універсальний тег для титулок, що повторюються */
    font-family: var(--ff-Rosario);
    font-weight: 700;
    font-size:  70px;
    line-height: 90px;
}

.inner-text { /* універсальний тег для тексту після титулок, що повторюються */
    line-height: 30px;
    color: var(--color-secondary);
}

/* ========================== main style ========================== */

body {
    font-family: var(--ff-dnSans);
    font-weight: 400;
    font-size:  18px;
    line-height: 1;
    color: var(--color-primary); /* var - це змінна, колір зашифрували на початку */
}

.hidden{
    overflow-y: hidden; /* забороняємо вертикальний скрол, коли меню відкрите */
}

.wrapper { 
    max-width: 1440px; /* задаємо ширину нашого макету */
    margin: 0 auto; /* поверне нам позиціонування */
}

.link-bg--green { /* іконка Rerestar Now */
    background-color: var(--bg-green-lt);
    color: var(--color-white);
}

.burger{
    display: none; /* не відображати */
}

.header { /* блок з меню */
    height: 149px;
}

.header__fixed { 
    position: fixed;  /* фіксуємо позицію відносно інших елементів */
    z-index: 3;
    top: 0;  /* розтягуємо header по усій ширині */
    left: 0; /* розтягуємо header по усій ширині */
    right: 0; /* розтягуємо header по усій ширині */
    padding: 50px 0 43px 0;
    background: var(--bg-white);
}

.container {
    max-width: 1240px;
    margin: 0 auto;
}

.header-wrapper {
    display: flex; /* щоб елементи встали в ряд */
    justify-content: space-between; /* щоб рознести меню та лого по сторонам */
    align-items: center; /* щоб меню та лого були відцентровані по горизонталі */
}

.menu {
    display: flex; /* щоб елементи встали в ряд */
}

.header-block {
    display: flex; /* щоб елементи встали в ряд */
    align-items: center; /* щоб меню справа було відцентровано по горизонталі */
}

.menu__item:not(:last-child) { /* задаємо списку меню відступи міє елементами (окрім останнього елементу) */
    margin-right: 40px;
}

.menu__link {
    line-height: 24px;
}

.header-logo {
    display: block;
    width: 57px; /* задаємо розміри логотипу */
}

.form {
    display: flex; /* щоб елементи встали в ряд і нікуди не розбігались*/
    align-items: center; /* щоб меню справа було відцентровано по горизонталі */
}

.search {
    width: 0; /* щоб напис search зник */
}

.header-btn { /* іконка пошуку */
    width: 40px; /* задаємо розмір іконки пошуку */
    height: 40px;
    background-color: var(--bg-mint-cream); /* задаємо колір бекграунду для іконки пошуку, вибираємо зі списку, який ми задали на початку */
    background-image: url(../images/search-icon.svg); /* задаємо колір іконки пошуку */
    background-repeat: no-repeat; /* щоб не повторювався колір фону */
    background-position: center; /* щоб іконка була по центру всередині блоку */
    border-radius: 50%; /* робимо фон іконки пошуку круглим */
    -webkit-border-rad: 50%;
    -moz-border-radius: 50%;
    -ms-border-radius: 50%;
    -moz-border-radius: 50%;
}

.header-btn:hover{
    box-shadow: inset 0px 0px 10px 0px #0000006f;
}

.cart { /* іконка корзина */
    display: block;
    position: relative; /* додаємо псевдоелемент, елемент повинен зміщатися відносно свого звичайного місцезнаходження, але це зміщення не впливає на розташування інших елементів на сторінці */
    width: 40px; /* задаємо розмір іконки */
    height: 40px;
    margin: 0 32px 0 20px; /* задаємо відсупи від іконки: зверху-справа-знизу-зліва */
    background-color: var(--bg-mint-cream); /* задаємо колір бекграунду для іконки пошуку, вибираємо зі списку, який ми задали на початку */
    background-image: url(../images/cart.svg); /* задаємо колір іконки пошуку */
    background-repeat: no-repeat; /* щоб не повторювався колір фону */
    background-position: center; /* щоб іконка була по центру всередині блоку */
    border-radius: 50%; /* робимо фон іконки пошуку круглим */
    -webkit-border-rad: 50%;
    -moz-border-radius: 50%;
    -ms-border-radius: 50%;
    -moz-border-radius: 50%;
}

.cart:hover{
    box-shadow: inset 0px 0px 10px 0px #0000006f;
}

.cart::after { /* додаємо псевдоелемент, зелену точку над корзиною */
    content: "";/* для того, щоб псевдоелемент відрисувався, вказуємо контейнер, без цього нічого не буде видно */
    width: 6px; /* задаємо розмір псевдоелементу */
    height: 6px;
    position: absolute; /* Це правило CSS встановлює позицію елемента як абсолютну всередині його контейнера. Коли елемент має абсолютну позицію, він видаляється зі звичайного потоку документа і розташовується відносно його найближчого предка з встановленою позицією (або відносно початкового контейнера, якщо жоден предок не має встановленої позиції). Властивості top, right, bottom та left можуть використовуватися для визначення точної позиції елемента. */
    top: 8px; /* задаємо відступи псевдоелементу */
    right: 13px;
    background-color: var(--bg-green-lt); /* задаємо колір псевдоелементу */
    border-radius: 50%; /* робимо псевдоелемент круглим */
    -webkit-border-rad: 50%;
    -moz-border-radius: 50%;
    -ms-border-radius: 50%;
    -moz-border-radius: 50%;
}

.header-link { /* іконка Regestar Now */
    width: 160px; /* задаємо ширину іконки */
    padding: 10px 0; /* задаємо висоту іконки за допомогою падингів */
    line-height: 20px;
    text-align: center; /* робимо, щоб напис на інконці був по середині */
    border-radius: 8px; /* заокруглюємо блок іконки */
}

.header-link:hover{
    box-shadow: inset 0px 0px 10px 0px #0000006f;
}

/* ********************** End header ************************* */

/* ********************** hero сторінка 1 ************************* */
.hero {
    background-color: var(--bg-mint-cream);
}

.hero-inner-wrapper { /* перша картинка */
    background-image: url(../images/fresh-melientha-suavis-pierre-leaves-white-surface.png);
    background-repeat: no-repeat; /* щоб елемент (картинка) не розмножувався по усій сторінці */
    background-position: left top; /* щоб елемент (картинка) займав лівий верхній вугол */
    padding: 93px 0 33px 0; /* якщо ми задамо відступи для hero,тоді hero-inner-wrapper не буде примикати чітко до лівого верхнього краю */
}

.hero-title { /* титульні назви */
    text-align: center;
    margin-bottom: 20px;
}

.herro-text { /* текст після титульних назв */
    max-width: 637px;   
    margin: 0 auto 59px auto;
    text-align: center; /* щоб текст був чітко відцентрований по середині */
}

.hero-wrapper {
    display: flex; /* усі елементи стали однакової висоти */
    justify-content: space-between;
    align-items: center; /* щоб список, що збоку від картинки, відцентрувався по вертикалі, оскільки він був зверху */
}

.hero-img {
    position: relative;
    width: 863px;
}

.link { /* елемент Order Now (1-ша сторінка) та Explor Now (3-тя сторінка)*/
    padding: 10px 5px; /*  додаємо ефекти для того, щоб тінь на кнопках була цікавіша, збільшуємо отступи, щоб елементи в кнопці не були такі сковані */
    position: relative; /* додаємо, щоб управляти псевдоелементом */
    display: flex;
    justify-content: space-between;
    align-items: center;
    font-weight: 500;
    font-size: 18px;
    line-height: 30px;

    border-radius: 5px; /*  додаємо ефекти для того, щоб тінь на кнопках була цікавіша, заокруглення кнопки  */
    -webkit-border-radius: 5px;
    -moz-border-radius: 5px;
    -ms-border-radius: 5px;
    -o-border-radius: 5px;

    transition: 0.3s linear; /*  додаємо ефекти для того, щоб тінь на кнопках була цікавіша, АНІМАЦІЯ та ПЛАВНІСТЬ (linear) */
    -webkit-transition: 0.3s linear;
    -moz-transition: 0.3s linear;
    -ms-transition: 0.3s linear;
    -o-transition: 0.3s linear;
}

/* hover на мобільних телефонах і планшетах не працює */
.link:hover { /* при наведенні, елемент Order Now (1-ша сторінка) та Explor Now (3-тя сторінка)*/
    box-shadow: inset 0px 0px 10px 0px #0000006f; /* тінь:    inset- для тіні всередину елемента, потім - змішення по горизонталі та зміщення по вертикалі, розмитіє тіні, зміщення тіні, колір */
/* додаємо динаміки та плавності */
}

.hero-link { /* елемент Order Now */
    position: absolute; /* Це правило CSS встановлює позицію елемента як абсолютну всередині його контейнера. Коли елемент має абсолютну позицію, він видаляється зі звичайного потоку документа і розташовується відносно його найближчого предка з встановленою позицією (або відносно початкового контейнера, якщо жоден предок не має встановленої позиції). Властивості top, right, bottom та left можуть використовуватися для визначення точної позиції елемента. */
    top: -28px;
    right: 20%;
    width: 176px;
    height: 74px;
}

.link::after { /* додаємо псевдо елемент після OrderNow (1-ша сторінка) та Explor Now (3-тя сторінка) */
    content: ""; /* для того, щоб псевдоелемент відрисувався, вказуємо контейнер, без цього нічого не буде видно */
    width: 64px; /* задаємо розмір псевдоелементу */
    height: 64px;
    background: var(--bg-green-lt) url(../images/arrow-right.svg) no-repeat center; /* задаємо колір псевдоелементувиставляємо по вертикалі по центру */
    right: 0; /* прижимаємо псевдоелемент до правого краю */
    top: 0; /* центруємо */
    
    border-radius: 50%; /* робимо псевдоелемент круглим */
    -webkit-border-rad: 50%;
    -moz-border-radius: 50%;
    -ms-border-radius: 50%;
    -moz-border-radius: 50%;
}

.hero-list { /* список, що справа від першої картинки */
    width: 250px;
}

.hero-item:not(:last-child) { /* список справа, окрім останнього елемента */
margin-bottom: 30px;
}

.hero-item { /* список справа / вехня стрічка */
    width: 250px;
    padding: 17px 33px 17px 113px;  /* задаємо відступи для списку зверху-справа-знизу-зліва */
    font-size: 48px;
    line-height: 48px;
    color: var(--color-black);
}

.hero-item span { /* елементи списку справа / нижня стрічка */
    display: block;
    font-size: 18px;
    line-height: 30px;
    text-align: center;
}

.users { /* працюємо з кожним елементом списка справа */
    background-color: var(--bg-white);
    background-image: url(../images/user.svg);
    background-repeat: no-repeat;
    background-position: left 33px center;
}

.starts { /* працюємо з кожним елементом списка справа */
    background-color: var(--bg-white);
    background-image: url(../images/star.svg);
    background-repeat: no-repeat;
    background-position: left 33px center;
}

.items { /* працюємо з кожним елементом списка справа */
    background-color: var(--bg-white);
    background-image: url(../images/items.svg);
    background-repeat: no-repeat;
    background-position: left 33px center;
}


/* ********************** End hero сторінка 1 ************************* */



/* -- ********************** section service сторінкиа 2 ************************* */


/* Тут у нас 2 блоки, перший - текст і список, другий - картинка. Вони прижаті друг до друга і вирівнювання по низу, що зробимо за допомогою flex. Є вутрішні падинги, зверху 140 пікселів, та знизу 160 пікселів. Є контейнер, він без фону. Картинка має анімацію, розібємо її на декілька блоків. Список змінює фон і фон елементів списку при наведенні. Є стрілочка для переходу на наступну сторінку. Ми створемо загальну секцію, в якій розмістимо контейнер і врапер. В списку UL створимо 3 span всередині кожного тегу li. Один span (лівий, іконка) назначимо через position: absolute, додамо іконку через backgroundю Для тега LI добавимо псевдоелемент, який має кружочок, всередині якого буде цей span (іконка), тому, що нам потрібно використовувати зміщення по осі Z (всередину і вперед), використаємо z-index (який працює тільки впарі з position:). */

.service { /* контейнер для 2-ї сторінки */
    padding: 141px 0 166px 0;
}

.service-wrapper { /* контейнер для контенту 2-ї сторінки */
    display: flex;  /* щоб елементи встали в ряд */
    justify-content: center; /* розміщуємо контейнер по центру */
    align-items: flex-end; /* елемент, що відповідає за поперечну ось Y, робимо, щоб правий блок був знизу */
    flex-wrap: wrap; /* щоб при зменшенні ширини екрану контент переходив на нову строку */
}


/* ======= лівий блок ======= */
/* кружочок добавим через псевдоелемент, іконку через spsn, який має клас icon і ми додамо новий клас (delivery, order, time) */
.service-content { /* лівий блок */
    width: 671px; /* ширина */
    padding-bottom: 32px; /* відступ до стрілочки знизу */
    position: relative; /* тому, що будемо позиціонувати всередині блоку */
}

.servce-title { /* заголовок */
    margin-bottom: 20px; /* нижній зовнішній відступ */
}

.service-text { /* текст */
    margin-bottom: 16px;/* нижній зовнішній відступ */
}

.service-item { /*список*/
    max-width: 500px; /* ширина усього тегу li */
    width: 100%;
    background: var(--bg-white);
    position: relative; /* елемент повинен зміщатися відносно свого звичайного місцезнаходження, але це зміщення не впливає на розташування інших елементів на сторінці */
    padding: 40px 59px 40px 163px; /* відступи до правої частини списку, в середині елементу списку */
    margin-bottom: 20px; /* нижній зовнішній відступ */
    cursor: pointer; /* щоб стрілочка перетворювалась на ручку при наведенні курсора на список */
    
    transition: 0.3s linear;
    -webkit-transition: 0.3s linear;
    -moz-transition: 0.3s linear;
    -ms-transition: 0.3s linear;
    -o-transition: 0.3s linear;
}

.service-item:hover { /* список при наведенні курсору */
    background: var(--bg-mint-cream);
}

.service-item::before { /* псевдоелемент, це елемент, який є у основного тега і не повторює свого батьківського елемента */
    content: ""; /* !!! без цього правила псевдоелемент не буде відображатись */
    position: absolute; /* Це правило CSS встановлює позицію елемента як абсолютну всередині його контейнера. Коли елемент має абсолютну позицію, він видаляється зі звичайного потоку документа і розташовується відносно його найближчого предка з встановленою позицією (або відносно початкового контейнера, якщо жоден предок не має встановленої позиції). Властивості top, right, bottom та left можуть використовуватися для визначення точної позиції елемента. */
    width: 80px;
    height: 80px;
    background: var(--bg-mint-cream);
    top: 50%; /* позиціонуємо по центру по вертикалі */
    left: 59px; /* позиціонуємо по горизонталі */
    
    border-radius: 50%; /* малюємо круг для фону під іконкою */
    -webkit-border-radius: 50%;
    -moz-border-radius: 50%;
    -ms-border-radius: 50%;
    -o-border-radius: 50%;

    transform: translateY(-50%); /* для тог ощоб круг став чітко по центру блока */
    -webkit-transform: translateY(-50%);
    -moz-transform: translateY(-50%);
    -ms-transform: translateY(-50%);
    -o-transform: translateY(-50%);
    -webkit-transform: translateY(-50%);

    transition: 0.3s linear;
    -webkit-transition: 0.3s linear;
    -moz-transition: 0.3s linear;
    -ms-transition: 0.3s linear;
    -o-transition: 0.3s linear;
}

.service-item:hover::before { /* список при наведенні курсору (псевдоелемент) */
    background: var(--bg-white);
}

/* перша іконка */
.icon-delivery {
    display: block;
    width: 40px;
    height: 40px;
    background: url(..//images/delivery-man.svg) no-repeat center;
    position: absolute;
    top: 50%;
    left: 79px;
    transform: translateY(-50%); /* для тог ощоб круг став чітко по центру блока */
    -webkit-transform: translateY(-50%);
    -moz-transform: translateY(-50%);
    -ms-transform: translateY(-50%);
    -o-transform: translateY(-50%);
    -webkit-transform: translateY(-50%);
}

/* друга іконка */
.icon-order {
    display: block;
    width: 40px;
    height: 40px;
    background: url(..//images/shopping.svg) no-repeat center;
    position: absolute;
    top: 50%;
    left: 79px;
    transform: translateY(-50%); /* для тог ощоб круг став чітко по центру блока */
    -webkit-transform: translateY(-50%);
    -moz-transform: translateY(-50%);
    -ms-transform: translateY(-50%);
    -o-transform: translateY(-50%);
    -webkit-transform: translateY(-50%);
}

/* третя іконка */
.icon-time {
    display: block;
    width: 40px;
    height: 40px;
    background: url(..//images/fast-time.svg) no-repeat center;
    position: absolute;
    top: 50%;
    left: 79px;
    transform: translateY(-50%); /* для тог ощоб круг став чітко по центру блока */
    -webkit-transform: translateY(-50%);
    -moz-transform: translateY(-50%);
    -ms-transform: translateY(-50%);
    -o-transform: translateY(-50%);
    -webkit-transform: translateY(-50%);
}

.service-item__title { /* заголовок списку */
    display: block;
    font-weight: 700;
    font-size: 20px;
    line-height: 30px;
    margin-bottom: 8px;
}

.service-item__text { /* текст списку */
    display: block;
    font-size: 14px;
    line-height: 20px;
    color: var(--color-secondary);
}

.service-link { /* стрілочка знизу */
    display: block;
    position: absolute;
    width: 15px;
    height: 34px;
    background: url(../images/arrow-down.svg) no-repeat center;
    bottom: 0;
    left: 35%; /* відступ (зміщення) відносно Х з лівої сторони */

    animation: move 2s linear infinite; /* додаємо анімацію стрілочці знизу - move-розшифровка далі, 1.5s-довжина, linear-швидкість, infinite - безкінечне повторення */
    -webkit-animation: move 2s linear infinite;
}

/* ======= правий блок ======= */
.service-img { /* буде декілька бекграундів для одного блока */
    width: 569px; /* ширина */
    height: 569px;
    display: flex;
    justify-content: center; /* вирівнюємо по центру */
    padding-top: 31px; /* відступ від краю до картинки з чоловіком */

    /* перший та другий фон */
    background-image: url(../images/elips-fruit.png), url(../images/ellipse-bg.png);
    background-repeat: no-repeat;
    background-position: bottom 76px center, right 0 center; /* перший та другий фон */
    background-size: 398px, contain; /* перший та другий фон */
}

/* картинка з чоловіком */
.service-img figure { /* так, як елемент figure не має класу, вказуємо батьківський елемент .service-img */
    max-width: 354px;
    width: 100%;
    animation: moveImg 2s linear infinite; /* додаємо анімацію стрілочці знизу - moveImg-розшифровка далі, 1.5s-довжина, linear-швидкість, infinite - безкінечне повторення */
    -webkit-animation: moveImg 2s linear infinite;
}

@keyframes move { /* мотор анімації стрілочки знизу, move - просто тег, можна використати інший */
    0%{
        bottom: 0;
    }
    50%{
        bottom: 10px;
    }
    100%{
        bottom: 0;
    }
}

@keyframes moveImg { /* мотор анімації чоловічка, moveImg - просто тег, можна використати інший */
    0%{
        transform: translateY(0px); /* рухаємо по вертикалі */
        -webkit-transform:tranlateY(0px);
        -moz-transform: translateY(0px);
        -ms-transform: translateY(0px);
        -o-transform: translateY(0px);
        -webkit-transform: translateY(0px);
}
    50%{
        transform: translateY(20px);
        -webkit-transform: translateY(20px);
        -moz-transform: translateY(20px);
        -ms-transform: translateY(20px);
        -o-transform: translateY(20px);
}
    100%{
        transform: translateY(0px);
        -webkit-transform: translateY(0px);
        -moz-transform: translateY(0px);
        -ms-transform: translateY(0px);
        -o-transform: translateY(0px);
}
}
/* -- ********************** End section service сторінка 2 ************************* */


/* -- ********************** section Vegitable сторінка 3 ************************* */
/* у нас є загальний бекграунд в цій секції
також, у нас є  бекграунд у вигляді картинки
також, у нас є елемент, який вже зустрічався в секції hero, тому ми обєднаємо стилі цих елементів
і додамо йому ефект при наведенні */

.vegetable { /* уся сторінка */
    background: var(--bg-green-lt-op); /* загальний бекграунд в цій секції, якщо ми задамо тут окремо апасіті, то він розповсюдиться на усі внутрішні елементи, тому, що це батьківський елемент, тому ми задаємо через перемінну */
}

.vegetable-inner-wrapper {  /* блок, що все об'єднує */
    padding: 89px 0 143px 0;
    background-image: url(../images/fresh-melientha-suavis.png);    /* закріплюємо бекграунд в правому нижньому вуглу */
    background-repeat: no-repeat; /* робимо, щоб він не повторювався */
    background-position: right 50px bottom; /* робимо відступ 50 пікселів справа і 0 пікселів знизу */
    background-size: auto; /* додаткова змінна, для 100% впевненості, що при зміні розміру екрану, наша структура не зламається, буде автоматично вираховуватись. Візуально нічого не зміниться, але й ламатись не буде */
}

.vegetable-wrapper { /* блок, в якому знаходяться усі елементи */
    display: flex; /* тепер елемени розміщені вздовж горизонтальної осі Х */
    flex-wrap: wrap; /* щоб елементи при зменшенні ширини браузера автоматично ставали друг під друга */
    justify-content: center; /* щоб при перенесенні на нову стрічку елементи були відцентровані */
    gap: 50px; /* щоб, браузер автоматично додавав відступ до сосіднього елементу, по горизонталі, чи по вертикалі, в залежності, як будуть розміщуватись елементи при зміні розміру екрану */
}

/* лівий блок ФОТКА */
.vegetable-img {
    max-width: 600px;
    width: 100%;
}

/* увесь правий текстовий блок */
.vegetable-contant {
    max-width: 574px; /* орієнтуємся по пирині найширшого з 2-х елементів, а саме тексту під заголовком */
    width: 100%; 
    padding-top: 30px; /* вираховуємо висоту верхнього відступу 119 (текс) - 89 (картинка), виходить, нам потрібно встановити значення 30 пікселів */
}

.vegetable-text { /* текст під заголовком */
    margin: 20px 0 50px 0; /* зверху-справа-знизу-зліва */
}

.vegetable-link { /* елемент Explor Now (кнопка) */
    width: 179px;
    height: 74px;   
}

/* -- ********************** End section Vegitable сторінка 3 ************************* */
/* -- ********************** section Customers сторінка 4 ************************* */
.customers {
    padding: 96px 0 150px 0;
}

.customer-wrapper {
    display: flex; /* щоб елементи були на одній осі горизонтально */
    align-items: flex-end; /* прибиваємо обидва елемента до нижньої частини */
    justify-content: space-between; /* розділяємо елементи, розносимо по сторонам */
    /* flex-wrap: wrap; при зменшенні розміру екрану елементи встануть один під другим */
    gap: 20px; /* відступ між елементами */

}

.customer-content { 
    width: 640px; /* орієнтуємось на ширину самої широкої частини,а саме h2 */
    padding-bottom: 34px;
}

.customer-title {
    padding-left: 2px;
}

.cutomer-text {  /* текст p */
    width: 586px;
    margin: 30px 0 40px 0;
}

.customer-name { /* !!! ВАЖЛИВО !!!!   --- >>>   так, як ця частина SPAN, її треба зробити блочною, їнакше не буде працювати, маємо вказати властивість display: block; */
    font-size: 30px;
    line-height: 36px;
    display: block;
    margin-bottom: 20px;
}

.customer-img {
    width: 500px;
    height: 500px;

    border-radius: 50%;
    -webkit-border-radius: 50%;
    -moz-border-radius: 50%;
    -ms-border-radius: 50%;
    -o-border-radius: 50%;

    /* background: var(--bg-mint-cream); */

    animation: moveImg 2s linear infinite; /* додаємо анімацію стрілочці зверху - moveImg-розшифровка далі, 1.5s-довжина, linear-швидкість, infinite - безкінечне повторення */
    -webkit-animation: moveImg 2s linear infinite;
}

.customer-starts { /* зірки */
    display: flex; /* пишемо цю умову, щоб мати можливість встановити відступ між зірками */
    gap: 9px; /* задаємо відступ між зірками */
}

.slider-btn {
    width: 56px;
    height: 56px;
    background: var(--bg-white);
    border: 1px solid var(--btn-border);
    border-radius: 50%;
    -webkit-border-radius: 50%;
    -moz-border-radius: 50%;
    -ms-border-radius: 50%;
    -o-border-radius: 50%;
    position: absolute;
    z-index: 2; /* бо у нас зникла друга кнопка */
    bottom: 15px ;
}

.slider-btn:hover{
    box-shadow: inset 0px 0px 10px 0px #0000006f;
}

.slider-prev { /* кнопка навігації */
    left: 27%;
}

.slider-prev::before { /* псевдлелемент (стрілочка) */
    content: ""; /* !!! ВАЖЛИВО ключове правило. Без цієї умови у нас не буде видно псевдоелемент */
    display: block;  /* Без цієї умови у нас не буде видно псевдоелемент */
    width: 12px;
    height: 18px;
    background: url(../images/vector-left.svg) no-repeat center;

    /* нижче - вирівнюємо псевдоелемент (стрілочка) по центрк по горизонталі */
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    -webkit-transform: translate(-50%, -50%);
    -moz-transform: translate(-50%, -50%);
    -ms-transform: trnslate(-50%, -50%);
    -o-transform: translate(-50%, -50%);
}

.slider-prev.active { 
    background: var(--bg-green-lt);
    border: 1px solid var(--bg-green-lt);
}

.slider-prev.active::before { /* псевдлелемент (стрілочка) */
    content: ""; /* !!! ВАЖЛИВО ключове правило. Без цієї умови у нас не буде видно псевдоелемент */
    background: url(../images/vector-left-active.svg) no-repeat center;
}

.slider-next { /* кнопка навігації */
    left: 34%;
}

.slider-next::before { /* псевдлелемент (стрілочка) */
    content: ""; /* !!! ВАЖЛИВО ключове правило. Без цієї умови у нас не буде видно псевдоелемент */
    display: block;  /* Без цієї умови у нас не буде видно псевдоелемент */
    width: 12px;
    height: 18px;
    background: url(../images/vector-right.svg) no-repeat center;

    /* нижче - вирівнюємо псевдоелемент (стрілочка) по центрк по горизонталі */
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    -webkit-transform: translate(-50%, -50%);
    -moz-transform: translate(-50%, -50%);
    -ms-transform: translate(-50%, -50%);
    -o-transform: translate(-50%, -50%);
}

.slider-next.active {
    background: var(--bg-green-lt);
    border: 1px solid var(--bg-green-lt);
}

.slider-next.active::before { /* псевдлелемент (стрілочка) */
    content: ""; /* !!! ВАЖЛИВО ключове правило. Без цієї умови у нас не буде видно псевдоелемент */
    background: url(../images/vector-right-active.svg) no-repeat center;
}

.slick-dots {
    display: flex;
    gap: 15px;
    position: absolute;
    left: 50%;   /* зміщуємо елемент вправо на 50% */
    bottom: -50px;
    transform: translateX(-50%); /* -- зміщуємо елемент вліво на 50% своєї ширини */
}

.slick-dots li{
    font-size: 0;
    line-height: 0;
    width: 15px;
    height: 15px;
    border-radius: 50%;
    background: #ccc;
}

.slick-dots li.slick-active{
    background: #555;
}

.slick-dots li button{
    font-size: 0;
    line-height: 0;
    border: none;
    background: transparent;
}

/* -- ********************** End section Customers сторінка 4 ************************* */
/* -- ********************** Section App сторінка 5 ************************* */

/* загальна секція, спочатку задамо відступи */
.app {
    padding-bottom: 140px;
}

/* wrapper, спочатку задамо відступи зліва-справа*/
.app-wrapper {
    padding: 0 100px;   
    display: flex; /* застосовується до контейнера для встановлення контексту Flexbox. Flexbox - це техніка вирівнювання та розташування елементів в контейнері. */
    justify-content: space-between; /* Вказує, як розподіляти простір між ізольованими елементами. 
                                            Основні значення для justify-content:
                                                flex-start: Елементи розташовуються від початку контейнера.
                                                flex-end: Елементи розташовуються від кінця контейнера.
                                                center: Елементи розташовуються по центру контейнера.
                                                space-between: Простір розподіляється рівномірно між елементами, залишаючи простір по обидві сторони від першого та останнього елементів.
                                                space-around: Простір розподіляється рівномірно між елементами, а також по обидві сторони від першого та останнього елементів.
                                                space-evenly: Простір розподіляється рівномірно між всіма елементами, включаючи простір по обидві сторони від першого та останнього елементів. */
    align-items: center; /* тому, що блок по відношенню до картинки відцентрований, тому маємо застосувати це правило */
    gap: 20px;
}

/* задаємо ширину лівому блоку */
.app-img {
width: 265px;
animation: moveImg 2s linear infinite; /* додаємо анімацію стрілочці зверху - moveImg-розшифровка далі, 1.5s-довжина, linear-швидкість, infinite - безкінечне повторення */
-webkit-animation: moveImg 2s linear infinite;
}

/* задаємо ширину правому блоку */
.app-content {
    width: 663px;
}

/* верхня кнопка Download App */
.app-subtitle {
    display: block;   /* !!! ВАЖЛИАО !!! цей елемент у нас span, а він є строчним!!! Для того, щоб ним управляти і він слухався і вів себе, як блочний елемент, ми задаємо цей параметр і робимо його блочним */
    width: 170px;
    padding: 11px 0;   /* Задаємо падінги зверху і знизу. Зліва і справа не задаємо, тому, що  у нас фіксована ширина */
    text-align: center;  /* встановлює горизонтальне вирівнювання тексту всередині елемента */
    background: var(--bg-mint-cream);
    border-radius: 50px;
    -webkit-border-radius: 50px;
    -moz-border-radius: 50px;
    -ms-border-radius: 50px;
    -o-border-radius: 50px;
    color: var(--color-dark);
    margin-bottom: 27px;
}

.app-subtitle:hover{
    cursor: pointer;
    box-shadow: inset 0px 0px 10px 0px #0000006f;
}

/* Текст абзацу. Встановимо йому ширину і відступи знизу і зверху. */
.app-text {
    width: 574px;
    margin: 20px 0 50px 0; /* зверху 20, справа 0, знизу 50, зліва 0 */
}
   
/* Наступні 7 блоків для кнопок App Store та Google Play */
.app-block {
    display: flex;  /* Коли ви встановлюєте display: flex; для батьківського контейнера, його дочірні елементи стають гнучкими елементами Flexbox. Це включає властивості, такі як flex-direction, justify-content, align-items, які можна використовувати для контролю за розміщенням і вирівнюванням елементів. */
    justify-content: center; /* використовується для вирівнювання елементів вздовж головної осі (горизонтальної осі) гнучкого контейнера (Flexbox) по центру. Вона дозволяє рівномірно розподілити простір між елементами так, щоб центральний елемент або група елементів були вирівняні по центру контейнера. */
    /* align-items: center;  Елемент схлопнеться зверху і знизу. Встановлює вертикальне вирівнювання дочірніх елементів гнучкого контейнера Flexbox по центру вздовж поперечної (cross) осі */
    flex-wrap: wrap; /* елементи в гнучкому контейнері, якщо вони не вміщаються в один ряд, будуть автоматично переміщатися на новий ряд. */
    gap: 24px;
}

.app-link {
    width: 104px;
    border: 1px solid #A6A6A6; /* 1px -це товщина межі (1 піксель), solid- тип лінії межі (тверда лінія), #A6A6A6- код кольору межі */
    border-radius: 5px;
    -webkit-border-radius: 5px;
    -moz-border-radius: 5px;
    -ms-border-radius: 5px;
    -o-border-radius: 5px;
    padding: 5px 0;
    color: var(--color-white);
    display: block; /* для того, щоб бути впевненим, що ці елементи ведть себе, як блочні */
    transition: 0.3s linear;
    -webkit-transition: 0.3s linear;
    -moz-transition: 0.3s linear;
    -ms-transition: 0.3s linear;
    -o-transition: 0.3s linear;
} 

.app-link:hover {
    box-shadow: 0 0 5px 2px rgba(0, 0, 0, 0.35); /* 0 0: Зсув тіні по горизонталі та вертикалі. 5px: Розмір розмиття тіні. 2px: Розмір тіні відносно елемента. rgba(0, 0, 0, 0.35): Колір тіні у форматі червоний, зелений, синій, альфа (прозорість) — у цьому випадку чорний з прозорістю 0.35. */
    /* Застосовує трансформацію елемента, роблячи його похиленим на 0 градусів по горизонталі (X-осі) і 0 градусів по вертикалі (Y-осі). */
    transform: skew(0deg, 0deg);
    -webkit-transform: skew(0deg, 0deg);
    -moz-transform: skew(0deg, 0deg);
    -ms-transform: skew(0deg, 0deg);
    -o-transform: skew(0deg, 0deg);
}

.app-store {
    background: var(--color-black) url(../images/aple.svg) no-repeat left 12px center;  /* no-repeat: Запобігає повторенню зображення. left 12px: Зміщення фонового зображення від лівого краю на 12 пікселів. center: Вирівнює фонове зображення вертикально по центру. */
    font-size: 12px;
    line-height: 12px;  /* висота рядка */
    font-weight: 500;
    letter-spacing: 0.7px;  /* використовується для визначення простору між символами (буквами) в тексті */
    padding-left: 34px;  /* відступ для того, щоб змістити елементи вправо */  
}

.app-store span {
    display: block;
    margin-bottom: 3px;
    font-size: 6px;
    line-height: 7px; 
    letter-spacing: 0.7px;  /* використовується для визначення простору між символами (буквами) в тексті */
}

.google-play {
    background: var(--color-black) url(../images/google.svg) no-repeat left 8px center;  /* no-repeat: Запобігає повторенню зображення. left 12px: Зміщення фонового зображення від лівого краю на 12 пікселів. center: Вирівнює фонове зображення вертикально по центру. */
    font-size: 11px;
    line-height: 12px;  /* висота рядка */
    font-weight: 500;
    letter-spacing: 0.7px;  /* використовується для визначення простору між символами (буквами) в тексті */
    padding-left: 32px;  /* відступ для того, щоб змістити елементи вправо */  
}

.google-play span {
    display: block;
    margin-bottom: 3px;
    font-size: 6px;
    line-height: 7px; 
    letter-spacing: 0.7px;  /* використовується для визначення простору між символами (буквами) в тексті */
    text-transform: uppercase; /* усі літери великі */
}
/* -- ********************** End section App сторінка 5 ************************* */
/* -- ********************** Section Footer сторінка 6 ************************* */

.footer {
    background: var(--bg-footer);
    padding: 67px 0 118px;
}

.footer-wrapper {
    display: flex;
    justify-content: space-between;
    /* align-items: center; */
    gap: 30px; /* щоб div і footer-block не прилипали друг до друга, коли екран стане меншим */
    flex-wrap: wrap;
}

.footer-logo {
    display: block; /* !!! ВАЖЛИВО !!! - ззадаю це правило, так, як span - це строчний елемент */
    width: 70px;
    height: 70px;
    margin-bottom: 30px;
}

.footer-text {
    width: 345px;
}

.footer-title {
   display: block;  /* !!! ВАЖЛИВО !!! - задаю це правило, так, як span - це строчний елемент */
   margin: 39px 0 40px;
   font-weight: 500;
   font-size: 24px;
   line-height: 31px;
}


.footer-item:not(:last-child) { /* !!!  - :not(:last-child) - для усіх, окрім останнього елемента */
    margin-bottom: 24px;
}

.footer-link {
    line-height: 23px;
    color: var(--color-secondary);
}

.footer-contact{
    color: var(--color-blue);
    font-weight: 400;
    line-height: 24px;
    text-decoration-line: underline; 
}

.footer-social {
    display: flex;
    gap: 20px;
    margin-top: 25px;
}

.footer-social a {   /* !!!  Звертаю увагу, що правила задаються для тегу "а" */
    display: flex;
    align-items: center;
    justify-content: center;
    width: 30px;
    height: 30px;
    box-shadow: 6px 6px 10px -1px rgba(0, 124, 196, 0.15);    /* ТІНЬ ДЛЯ СОЦІАЛЬХИХ ІКОНОК     
        Отже, цей код створює тінь зміщену на 6 пікселів по горизонталі і вертикалі, з розміром розмиття 10 пікселів, і трохи темнішою в центрі. Колір тіні - синій з прозорістю 0.15.      
            6px: Зміщення тіні по горизонталі (X-осі) на 6 пікселів.     
            6px: Зміщення тіні по вертикалі (Y-осі) на 6 пікселів.     
            10px: Розмір розмиття тіні.     
            -1px: Негативне значення вказує на розмір тіні в протилежному напрямку, що може зробити тінь більш темною. У цьому випадку, -1px означає, що тінь буде трохи темнішою в центрі.    
            rgba(0, 124, 196, 0.15): Колір тіні. У цьому випадку, тінь матиме колір з кодом RGB (0, 124, 196), що відповідає синьому коліру, і прозорість 0.15. */
    border: 1px solid rgba(0, 124, 196, 0);  /* 
            1px: Товщина межі в 1 піксель.
            solid: Тип лінії між межами.
            rgba(0, 124, 196, 0): Колір межі в форматі RGB, де (0, 124, 196) відповідає синьому коліру, та останній параметр 0 вказує на повну прозорість.
            Основна річ тут - останній параметр у rgba(0, 124, 196, 0) вказує на прозорість межі. У цьому випадку, 0 означає повну прозорість, тобто межа буде невидимою.
            Якщо ви хочете мати повністю невидиму межу, ви можете використовувати коротший запис border: none;, або border: 0;, як це найчастіше використовується для визначення відсутності межі. */
    transition: transform 0.5s;   /* анімація */
    -webkit-transition: transform 0.5s;
    -moz-transition: transform 0.5s;
    -ms-transition: transform 0.5s;
    -o-transition: transform 0.5s;
    
    border-radius: 50%; /* робимо фон іконки пошуку круглим */
    -webkit-border-rad: 50%;
    -moz-border-radius: 50%;
    -ms-border-radius: 50%;
    -moz-border-radius: 50%;
}

.footer-social a img {
    /* !!! Звертаю увагу, що правила задаються для тегу "а", а саме до картинки "img" */
    transform: scale(1);
    -webkit-transform: scale(1);
    -moz-transform: scale(1);
    -ms-transform: scale(1);
    -o-transform: scale(1);
    /* Задаємо трансформацію */
    /* Це використовується для зміни масштабу елемента на осі X та Y */
    /* У цьому конкретному випадку, scale(1) не вносить змін у масштаб, оскільки значення 1 означає не змінений масштаб. Це може використовуватися як скидання або скидання будь-яких попередніх трансформацій масштабу. */
}

.footer-social a:hover {
    /* Задаємо внутрішню тінь при наведенні на іконки */
    /* box-shadow в CSS використовується для додавання тіні до блока */
    /* inset вказує на те, що тінь буде внутрішньою, тобто розташованою всередині контуру блока, а не ззовні */
    /* 4px 4px: Зсув тіні по горизонталі та вертикалі, відповідно. */
    /* 6px: Розмір розмиття тіні. */
    /* -2px: Негативне значення вказує на розмір тіні в протилежному напрямку, зробляючи тінь трохи темнішою в центрі. */
    /* rgba(0, 0, 0, 0.2): Колір тіні - чорний, та його прозорість 0.2. */
    box-shadow: inset 4px 4px 6px -2px rgba(0, 0, 0, 0.2);
        /* 1px: Товщина межі в 1 піксель.
        solid: Тип лінії між межами (в даному випадку - тверда лінія).
        rgba(0, 124, 196, 0.1): Колір межі в форматі RGB (0, 124, 196), що відповідає синьому коліру, та прозорість 0.1. Це означає, що межа матиме легку прозорість. */
            /* Зверніть увагу, що прозорість визначається значенням від 0 (повністю прозорий) до 1 (повністю непрозорий). У вашому випадку, прозорість дуже низька (0.1), тому межа буде майже непомітною, і це може створювати ефект легкої тіні чи обведення. */
    border: 1px solid rgba(0, 124, 196, 0.1);
}

.footer-social a:hover img {
    /* ця властивісь відповідає за зміну розміру елементу, в даному випадку - зменшення */
    transform: scale(0.7); 
    -webkit-transform: scale(0.7);
    -moz-transform: scale(0.7);
    -ms-transform: scale(0.7);
    -o-transform: scale(0.7);
    /* анімація */
    transition: transform 0.5s;
    -webkit-transition: transform 0.5s;
    -moz-transition: transform 0.5s;
    -ms-transition: transform 0.5s;
    -o-transition: transform 0.5s;
}
/* -- ********************** End Section Footer сторінка 6 ************************* */